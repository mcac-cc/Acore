plugins {
    id 'java'
    id 'eclipse'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.8'
    id("xyz.jpenilla.run-velocity") version "2.3.1"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'cc.mcac'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    compileOnly("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT")
    annotationProcessor("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT")
    implementation "org.bstats:bstats-velocity:3.0.2"
    implementation("com.zaxxer:HikariCP:5.1.0")
    implementation "com.mysql:mysql-connector-j:8.4.0"
    compileOnly("io.github.dreamvoid:MiraiMC-Velocity:1.9.2")
}

tasks.named('shadowJar') {
    archiveClassifier.set('') // 生成不带 -all/-shadow 后缀的主产物
    relocate 'com.zaxxer.hikari', 'cc.mcac.lib.hikari'
    relocate 'org.bstats', 'cc.mcac.lib.bstats'
    mergeServiceFiles {
        include 'META-INF/services/java.sql.Driver'
    }
}

tasks.named('build') {
    dependsOn tasks.named('shadowJar')
}

tasks {
    runVelocity {
        // Configure the Velocity version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        velocityVersion("3.4.0-SNAPSHOT")
    }
}

def targetJavaVersion = 17
java {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(targetJavaVersion)
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = ['version': project.version]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

project.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
